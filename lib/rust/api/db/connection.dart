// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../third_party/scatterbrain/api/api.dart';
import '../../third_party/scatterbrain/api/response.dart';
import 'entities.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

// These functions are ignored because they are not marked as `pub`: `connection`, `new`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `SubrosaDbInner`, `WatcherInner`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `drop`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SubrosaDb>>
abstract class SubrosaDb
    implements RustOpaqueInterface, Dao, SubrosaDao, TestDao {
  @override
  Future<void> deleteGroup({required UuidValue uuid});

  @override
  Future<void> deletePost({required UuidValue uuid});

  @override
  Future<List<User>> getAllUsers();

  @override
  Future<List<User>> getAllUsersByOwnership({required bool owned});

  @override
  Future<void> getConnection();

  @override
  Future<NewsGroup?> getGroup({required UuidValue uuid});

  @override
  Future<List<NewsGroup>> getGroupsForParent({required UuidValue parent});

  @override
  Future<CachedIdentity> getIdentity({required UuidValue uuid});

  @override
  Future<DateTime?> getLastSyncDate();

  @override
  Future<List<NewsGroup>> getParents({required UuidValue group});

  @override
  Future<List<Posts>> getPosts({required UuidValue parent});

  @override
  Future<List<PostWithIdentity>> getPostsWithIdentity(
      {required UuidValue parent});

  @override
  Future<List<NewsGroup>> getRootGroups();

  @override
  Future<PlatformInt64> getTotalPosts({required UuidValue group});

  @override
  Future<List<NewsGroup>> getUnsentGroups();

  @override
  Future<List<Posts>> getUnsentPosts();

  @override
  Future<User?> getUser({required UuidValue identity});

  Watcher getWatcher();

  Future<void> insertGroup({required NewsGroup group});

  Future<void> insertMessage({required Message message});

  @override
  Future<void> markSentGroups({required List<Value> ids});

  @override
  Future<void> markSentPosts({required List<Value> ids});

  factory SubrosaDb({required String path}) =>
      RustLib.instance.api.crateApiDbConnectionSubrosaDbNew(path: path);

  static SubrosaDb newInMemory() =>
      RustLib.instance.api.crateApiDbConnectionSubrosaDbNewInMemory();

  Future<void> processScatterMessages({required List<Message> messages});

  Future<void> sync_({required SbSession sbConnection});

  @override
  Future<List<NewsGroup>> test({required UuidValue uuid});

  @override
  Future<NewsGroup?> testNullable();

  @override
  Future<NewsGroup> testOne();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Watcher>>
abstract class Watcher implements RustOpaqueInterface {
  Future<void> watch(
      {required String table, required FutureOr<void> Function(SubrosaDb) cb});
}

abstract class Crud {
  Future<void> delete({required SubrosaDb conn});

  Future<void> insert({required SubrosaDb conn});

  Future<void> insertOnConflict(
      {required SubrosaDb conn, required OnConflict onConflict});

  Future<void> update({required SubrosaDb conn});
}

abstract class Dao {
  Future<void> getConnection();
}

enum OnConflict {
  update,
  ignore,
  abort,
  ;
}
