// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
part 'types.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`
// These functions are ignored (category: IgnoreBecauseNotAllowedOwner): `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type_message`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`, `get_type`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TypePrefix>>
abstract class TypePrefix implements RustOpaqueInterface {}

abstract class GetType {
  Future<TypePrefix> getTypeMessage();
}

class CryptoConfig {
  final String secretkey;
  final String pubkey;
  final String? remotekey;

  const CryptoConfig({
    required this.secretkey,
    required this.pubkey,
    this.remotekey,
  });

  static Future<CryptoConfig> generate() =>
      RustLib.instance.api.scatterbrainApiTypesCryptoConfigGenerate();

  @override
  int get hashCode => secretkey.hashCode ^ pubkey.hashCode ^ remotekey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CryptoConfig &&
          runtimeType == other.runtimeType &&
          secretkey == other.secretkey &&
          pubkey == other.pubkey &&
          remotekey == other.remotekey;
}

@freezed
sealed class ImportIdentityState with _$ImportIdentityState {
  const ImportIdentityState._();

  const factory ImportIdentityState.initiated(
    UuidValue field0,
  ) = ImportIdentityState_Initiated;
  const factory ImportIdentityState.complete(
    UuidValue field0,
  ) = ImportIdentityState_Complete;
}
