// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../api/db/connection.dart';
import '../../../api/db/entities.dart';
import '../../../api/net.dart';
import '../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
import 'response.dart';
import 'types.dart';
part 'api.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `from`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `try_pair_confirm`, `try_pair`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSyncFuture < 'static , SbResult < SbSession > >>>
abstract class DartSyncFutureSbResultSbSession implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PairingSession>>
abstract class PairingSession implements RustOpaqueInterface {
  List<String> get coin;

  UuidValue get session;

  set coin(List<String> coin);

  set session(UuidValue session);

  Future<PairResult> tryPairConfirm({required bool accept});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SbEvent>>
abstract class SbEvent implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SbSession>>
abstract class SbSession implements RustOpaqueInterface, Sender {
  Future<void> disconnect();

  Future<List<SbEvent>> getEvents({required bool block, int? count});

  Future<List<Identity>> getIdentity({UuidValue? id});

  Future<List<Message>> getMessages({required String application, int? limit});

  Future<List<Message>> getMessagesRecieveDate(
      {required String application,
      int? limit,
      DateTime? startDate,
      DateTime? endDate});

  Future<List<Message>> getMessagesSendDate(
      {required String application,
      int? limit,
      DateTime? startDate,
      DateTime? endDate});

  Future<ImportIdentityState> initiateIdentityImport({UuidValue? id});

  Future<bool> isClosed();

  Future<void> onConnect();

  Future<void> sendMessages(
      {required List<Message> messages, UuidValue? signIdentity});

  @override
  Future<void> sendNewsgroup({required NewsGroup newsgroup});

  @override
  Future<void> sendPost({required Posts post, required SubrosaDb db});

  Future<void> setOnConnect(
      {required FutureOr<void> Function(SbSession?) onConnect});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TryPairConfirm>>
abstract class TryPairConfirm implements RustOpaqueInterface {}

abstract class ProtoStreamTrait {
  Future<DartSyncFutureSbResultSbSession> tryPairConfirm(
      {required TryPairConfirm session, required bool accept});
}

class PairResult {
  final String remotekey;
  final SbSession session;

  const PairResult({
    required this.remotekey,
    required this.session,
  });

  @override
  int get hashCode => remotekey.hashCode ^ session.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PairResult &&
          runtimeType == other.runtimeType &&
          remotekey == other.remotekey &&
          session == other.session;
}

@freezed
sealed class PairStatus with _$PairStatus {
  const PairStatus._();

  const factory PairStatus.paired(
    SbSession field0,
  ) = PairStatus_Paired;
  const factory PairStatus.notPaired(
    PairingSession field0,
  ) = PairStatus_NotPaired;
}
