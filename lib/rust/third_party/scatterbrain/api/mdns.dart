// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'api.dart';
import 'mirror.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// These functions are ignored because they have generic arguments: `mdns_scan`
// These types are ignored because they are not used by any `pub` functions: `CancelationHandle`, `ServiceScannerInner`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<HostRecord>>
abstract class HostRecord implements RustOpaqueInterface {
  Future<SbSession?> connect({required CryptoConfig state});

  List<IpAddr> getAddrs();

  String getName();

  int getPort();

  Future<SbSession> pair(
      {required CryptoConfig state,
      required String appName,
      required FutureOr<bool> Function(List<String>) cb});

  Future<PairStatus> tryPair(
      {required CryptoConfig state,
      required String appName,
      required FutureOr<void> Function(SbSession?) onConnect});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Ipv4Addr>>
abstract class Ipv4Addr implements RustOpaqueInterface {
  Future<bool> isLoopback();

  Future<bool> isMulticast();

  Future<bool> isUnspecified();

  @override
  String toString();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Ipv6Addr>>
abstract class Ipv6Addr implements RustOpaqueInterface {
  Future<bool> isLoopback();

  Future<bool> isMulticast();

  Future<bool> isUnspecified();

  @override
  String toString();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceScanner>>
abstract class ServiceScanner
    implements RustOpaqueInterface, ServiceScannerLike {
  @override
  Future<void> discoverDevices(
      {required FutureOr<void> Function(List<HostRecord>) cb});

  factory ServiceScanner() =>
      RustLib.instance.api.scatterbrainApiMdnsServiceScannerNew();

  @override
  void scanNonblock({required FutureOr<void> Function(List<HostRecord>) cb});

  @override
  Future<void> stopScan();
}

abstract class ServiceScannerLike {
  Future<void> discoverDevices(
      {required FutureOr<void> Function(List<HostRecord>) cb});

  void scanNonblock({required FutureOr<void> Function(List<HostRecord>) cb});

  Future<void> stopScan();
}
